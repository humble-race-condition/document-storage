pipeline {
    agent any
    environment {
        JAVA_HOME = "${env.JAVA_21_HOME}"
        PATH = "${env.JAVA_21_HOME}/bin:${env.PATH}"
    }

    options {
        disableConcurrentBuilds()
    }

    stages {
        stage("Checkout") {
            steps {
                echo "Checkout branch: ${env.BRANCH_NAME}"
                checkout scm
            }
        }

        stage("Set package details") {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: "docker-hub-credentials", usernameVariable: "DOCKER_USER", passwordVariable: "DOCKER_PASS")]) {
                        def repository = sh(
                            script: "mvn help:evaluate -Dexpression=project.artifactId -q -DforceStdout",
                            returnStdout: true
                        ).trim()
                        env.APP_NAME = "${DOCKER_USER}/${repository}"
                    }
                }

                echo "App name is ${env.APP_NAME}"
                script {
                    def artifactVersion = sh(
                        script: "mvn help:evaluate -Dexpression=project.version -q -DforceStdout",
                        returnStdout: true
                    ).trim()
                    def gitHash = "${env.GIT_COMMIT}".substring(0, 8)

                    env.APP_FINAL_TAG = "final.${env.BRANCH_NAME}.${artifactVersion}.${env.BUILD_NUMBER}.${gitHash}"
                }

                echo "App tag is ${env.APP_FINAL_TAG}"
            }
        }

        stage("Build") {
            steps {
                sh "mvn clean compile"
            }
        }

        stage("Test build") {
            steps {
                sh "mvn clean test"
            }
        }

        stage("Package build") {
            steps {
                sh "mvn clean package -DskipTests"
            }
        }

        stage("Docker login") {
            steps {
                withCredentials([usernamePassword(credentialsId: "docker-hub-credentials", usernameVariable: "DOCKER_USER", passwordVariable: "DOCKER_PASS")]) {
                    sh 'echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin'
                }
            }
        }

        stage("Build docker image") {
            steps {
                sh "rm -rf docker-build && mkdir docker-build"
                sh "cp target/*.jar docker-build"
                sh "cp infrastructure/Dockerfile docker-build"
                dir("docker-build") {
                    sh "docker build -t ${env.APP_NAME}:${env.BRANCH_NAME} -t ${env.APP_NAME}:${env.APP_FINAL_TAG} ."
                }
            }
        }

        stage("Docker push") {
            steps {
                sh "docker push ${env.APP_NAME}:${env.BRANCH_NAME}"
                sh "docker push ${env.APP_NAME}:${env.APP_FINAL_TAG}"
            }
        }

        stage("Docker clean up") {
            steps {
                sh "docker rmi ${env.APP_NAME}:${env.BRANCH_NAME} ${env.APP_NAME}:${env.APP_FINAL_TAG}"
            }
        }
    }

    post {
        always {
            echo "Pipeline finished."
        }
        success {
            echo "Pipeline succeeded!"
        }
        failure {
            echo "Pipeline failed!"
        }
    }
}
