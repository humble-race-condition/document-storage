pipeline {
    agent any

    environment {
        JAVA_HOME = "${env.JAVA_21_HOME}"
        PATH = "${env.JAVA_21_HOME}/bin:${env.PATH}"
    }

    stages {
        stage('Checkout') {
            steps {
                echo "Checkout branch: ${env.BRANCH_NAME}"
                checkout scm
            }
        }

        stage('Set package details') {
            steps {
                script {
                    env.APP_NAME = sh(
                        script: "mvn help:evaluate -Dexpression=project.artifactId -q -DforceStdout",
                        returnStdout: true
                    ).trim()
                }
                echo "App name is ${env.APP_NAME}"
                script {
                    def packageVersion = sh(
                        script: "mvn help:evaluate -Dexpression=project.version -q -DforceStdout",
                        returnStdout: true
                    ).trim()

                    env.APP_VERSION = "${packageVersion}.${env.BUILD_NUMBER}"
                }
                echo "App version is ${env.APP_VERSION}"
                script {
                    env.APP_FULL_NAME = "${env.APP_NAME}.${env.BRANCH_NAME}.${env.APP_VERSION}"
                }
                echo "App full name is ${env.APP_FULL_NAME}"
            }
        }

        stage('Build') {
            steps {
                echo "Build ${env.APP_FULL_NAME}"
                sh 'mvn clean compile'
            }
        }

        stage('Test build') {
            steps {
                echo "Test ${env.APP_FULL_NAME}"
                sh 'mvn clean test'
            }
        }

        stage('Package build') {
            steps {
                echo "Package build: ${env.APP_FULL_NAME}"
                sh 'mvn clean package -DskipTests'
            }
        }

        stage('Build docker image') {
            steps {
                echo "Build docker image for ${env.APP_FULL_NAME}"
                sh 'rm -rf docker-build && mkdir docker-build'
                sh 'cp target/*.jar docker-build'
                sh 'cp infrastructure/Dockerfile docker-build'
                echo "Building Docker image with version: ${env.APP_VERSION}"
                dir('docker-build') {
                    sh "docker build -t ${env.APP_NAME}:${env.BRANCH_NAME} -t ${env.APP_NAME}:${env.APP_VERSION} -t ${env.APP_NAME}:${env.BRANCH_NAME}.${env.GIT_COMMIT} ."
                }
            }
        }
    }

    post {
        always {
            echo 'Pipeline finished.'
        }
        success {
            echo 'Pipeline succeeded!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
